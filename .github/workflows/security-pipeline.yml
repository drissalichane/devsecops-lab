name: Security Pipeline

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

jobs:
  # NEW JOB: Secret Scanning (runs first)
  secret-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Gitleaks
      run: |
        # Get the latest release version dynamically
        VERSION=$(curl -s https://api.github.com/repos/gitleaks/gitleaks/releases/latest | grep tag_name | cut -d '"' -f 4)
        echo "Installing Gitleaks version $VERSION"
        curl -sSL "https://github.com/gitleaks/gitleaks/releases/download/${VERSION}/gitleaks_${VERSION#v}_linux_x64.tar.gz" -o gitleaks.tar.gz
        tar -xzf gitleaks.tar.gz
        sudo mv gitleaks /usr/local/bin/gitleaks
        gitleaks version


      # adding --no-git to temporarily ignore commit history
    - name: Run Gitleaks Secret Scan
      run: gitleaks detect --source . --no-git --config .gitleaks.toml --report-path gitleaks-report.json --verbose --exit-code 1
    - name: Upload Gitleaks Report
      if: always()  # Upload even if scan fails
      uses: actions/upload-artifact@v4
      with:
        name: gitleaks-report
        path: gitleaks-report.json

  # NEW JOB: SAST Scanning
  sast-scan:
    runs-on: ubuntu-latest
    needs: secret-scan  # Run after secret scanning passes
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Run SpotBugs Security Scan
        run: mvn compile spotbugs:check
        continue-on-error: true  # Let it complete even if issues found
      
      - name: Generate SpotBugs Report
        if: always()
        run: mvn spotbugs:spotbugs
      
      - name: Upload SpotBugs Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: spotbugs-report
          path: target/spotbugsXml.xml
  # Original build job (runs after secret-scan passes)
  build:
    runs-on: ubuntu-latest
    needs: [secret-scan, sast-scan]  # Wait for both scans
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4  
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Build with Maven
        run: mvn clean package -DskipTests
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          EXTERNAL_API_KEY: ${{ secrets.API_KEY }}
      
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: application-jar
          path: target/*.jar
