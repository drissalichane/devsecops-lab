name: Security Pipeline

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

jobs:
  # NEW JOB: Secret Scanning (runs first)
  secret-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Gitleaks
      run: |
        # Get the latest release version dynamically
        VERSION=$(curl -s https://api.github.com/repos/gitleaks/gitleaks/releases/latest | grep tag_name | cut -d '"' -f 4)
        echo "Installing Gitleaks version $VERSION"
        curl -sSL "https://github.com/gitleaks/gitleaks/releases/download/${VERSION}/gitleaks_${VERSION#v}_linux_x64.tar.gz" -o gitleaks.tar.gz
        tar -xzf gitleaks.tar.gz
        sudo mv gitleaks /usr/local/bin/gitleaks
        gitleaks version


      # adding --no-git to temporarily ignore commit history
    - name: Run Gitleaks Secret Scan
      run: gitleaks detect --source . --no-git --config .gitleaks.toml --report-path gitleaks-report.json --verbose --exit-code 1
    - name: Upload Gitleaks Report
      if: always()  # Upload even if scan fails
      uses: actions/upload-artifact@v4
      with:
        name: gitleaks-report
        path: gitleaks-report.json

  # NEW JOB: SAST Scanning
  sast-scan:
    runs-on: ubuntu-latest
    needs: secret-scan  # Run after secret scanning passes
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Run SpotBugs Security Scan
        run: mvn compile spotbugs:check
        continue-on-error: true  # Let it complete even if issues found
      
      - name: Generate SpotBugs Report
        if: always()
        run: mvn spotbugs:spotbugs
      
      - name: Upload SpotBugs Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: spotbugs-report
          path: target/spotbugsXml.xml

  #New job: dependancy scanning

  dependency-scan:
    runs-on: ubuntu-latest
    needs: secret-scan
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Install Snyk CLI
        run: |
          curl -o snyk https://static.snyk.io/cli/latest/snyk-linux
          chmod +x snyk
          sudo mv snyk /usr/local/bin/
      
      - name: Authenticate Snyk
        run: snyk auth ${{ secrets.SNYK_TOKEN }}
      
      - name: Run Snyk test
        run: |
          snyk test --severity-threshold=high --json-file-output=snyk-report.json || true
          snyk test --severity-threshold=high  # Human-readable output to logs
        continue-on-error: true
      
      - name: Upload Snyk Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: snyk-report
          path: snyk-report.json

  # NEW JOB: Container Security Scanning
  container-scan:
    runs-on: ubuntu-latest
    needs: secret-scan  # Can run in parallel with other scans
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      
      # Build the JAR file first (needed for Docker image)
      - name: Build application JAR
        run: mvn clean package -DskipTests
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          EXTERNAL_API_KEY: ${{ secrets.API_KEY }}
      
      # Build the Docker image
      - name: Build Docker image
        run: docker build -t vulnerable-app:latest .
      
      # Scan the image with Trivy
      - name: Run Trivy vulnerability scanner on Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'vulnerable-app:latest'
          format: 'table'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'  # Fail if vulnerabilities found
        continue-on-error: true
      
      # Generate detailed JSON report
      - name: Generate Trivy JSON report
        if: always()
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'vulnerable-app:latest'
          format: 'json'
          output: 'trivy-container-report.json'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
      
      # Generate HTML report for easy viewing
      - name: Generate Trivy HTML report
        if: always()
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $(pwd):/output aquasec/trivy:latest image \
            --format template --template "@contrib/html.tpl" \
            -o /output/trivy-container-report.html \
            vulnerable-app:latest
      
      - name: Upload Trivy Container Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-container-reports
          path: |
            trivy-container-report.json
            trivy-container-report.html        

  # Original build job (runs after secret-scan passes)
  build:
    runs-on: ubuntu-latest
    needs: [secret-scan, sast-scan, dependency-scan, container-scan]  # Wait for all scans
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4  
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Build with Maven
        run: mvn clean package -DskipTests
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          EXTERNAL_API_KEY: ${{ secrets.API_KEY }}
      
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: application-jar
          path: target/*.jar
